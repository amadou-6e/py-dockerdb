name: Docker Build and Test with DockerHub Caching

on:
  push:
    branches:
      - main

jobs:
  docker-build-and-test:
    runs-on: ubuntu-latest

    container:
      image: docker:latest
      options: --privileged

    steps:
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME  }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Start Docker Daemon
        run: |
          dockerd-entrypoint.sh &
          sleep 10

      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        run: |
          docker buildx create --use --name builder --driver docker-container --bootstrap

      # Login to DockerHub
      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # Build with DockerHub registry cache
      - name: Build Docker image with DockerHub caching
        run: |
          # Replace 'your-username' with your actual DockerHub username
          DOCKERHUB_USER="${{ secrets.DOCKERHUB_USERNAME }}"
          CACHE_REF="${DOCKERHUB_USER}/buildcache:${{ github.repository_owner }}-$(echo ${{ github.repository }} | cut -d'/' -f2)"
          
          docker buildx build \
            --cache-from=type=registry,ref=${CACHE_REF} \
            --cache-to=type=registry,ref=${CACHE_REF},mode=max \
            --load \
            -t my-custom-image \
            -f docker/Dockerfile.test \
            .

      - name: Create workspace volume
        run: |
          docker volume create workspace_vol
          docker run --rm \
            -v workspace_vol:/workspace \
            -v ${{ github.workspace }}:/tmp/workspace_src \
            alpine cp -a /tmp/workspace_src/. /workspace/
          
      - name: Run tests in container
        run: |
          docker run --rm \
            -v workspace_vol:/app \
            my-custom-image \
            sh -c "echo 'Inside container'; pytest -v tests/test_postgres.py"